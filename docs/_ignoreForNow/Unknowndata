---
layout: post
title:  "Week 1: Introduction"
date:   2025-01-11 12:58:53 -0700
categories: jekyll update
---

## Learning Goals

<div markdown="ol" style="margin-bottom: 10px; margin-top: 10px; overflow: hidden; color: #31708f; background-color: #d9edf7; border-color: #bce8f1; padding: 15px; border: 1px solid transparent; border-radius: 4px;"> 
  <b>By the end of this week, you will be able to:</b>
  <ol>
    <li>Become familiar with the Syllabus, to learn about the structure of the course and its rules and policies</li>
    <li> Install and become familiar with your Integrated Development Environment (IDE) - Visual Studio Code</li>
    <li>Be able to identify the parts of a computer and their function in the computer system</li>
    <li>Write the ”hello world” program in C++</li>
  </ol>
</div>


**CONTENTS:**
* Do not remove this line (it will not be displayed)
{:toc}


## Background
This week will be an introduction to a variety of foundational material for computer science. You will need to learn how to navigate the required software, basic variables, user input, and algorithms/pseudocode. 

### Navigating Terminals and Compiling Code
In Visual Studio Code, you can open an integrated terminal, which initially starts at the bottom of your workspace. But what is a terminal?

A **terminal** is an **interface** to your computer which allows you to execute any task on the computer directly through **commands**, without the use of a graphical user interface or GUI (like the file explorers on your system that you use to navigate to folders, create files etc). This allows you to directly execute tasks, which is often quicker than using the GUI.

VS Code has a built in terminal that you can open and use to interact with your computer's files and any code you write. To access this terminal, you will need to open VS Code. It may look like this the first time you open it:

{% include img.html src='learn_terminal_1.png' alt='VS cod logo files icon bright white on left' caption='' %}

If you have not opened any folders yet in VS Code, you will need to start by opening one. You can do this by clicking "Open Folder" and navigating to whichever folder you would like to use. I would encourage you to make a new folder called "CSCI_1300" to keep all of your course materials organized. 

Once you have a folder open, you can open a terminal. To open the Terminal tab, go to the menu bar, locate Terminal and click on it. Select ``New Terminal" to open a new terminal. A terminal looks like a dark screen when you open it and will open below the main window.

{% include img.html src='learn_terminal_3.png' alt='Top navigation terminal dropdown first option New Terminal highlighted in blue' caption='' %}


The new screen should look something like this: 

{% include img.html src='learn_terminal_4.png' alt='bottom of space a terminal is open with strange symbols on it' caption='' %}

You will see your name and your device name on the terminal tab. Note that this can look different depending on your OS. The general anatomy of a terminal window is as follows:


1. Everything before the `:` tells you the username and the device name you’re logged in
1. Everything between the `:` and `$` is your current directory (think of a directory as the folder you’re in). Note that you do not need to be in the same directory as the screenshots shown above. Yours will depend on your computer. Mac/Linux and Windows will look different, but both will state the current directory (or "folder") that you are in.
1. `$` represents the end of the prompt, after which you can enter a command.



File browsing using the terminal is like using Windows explorer/Finder or clicking on folders and navigating to different folders on your machine.

In the terminal, instead of clicking on folders we use text commands to tell the computer what we want. If we want to go to a folder where we saved our last homework, we can type the commands to navigate to that folder and display its contents.

You can read file and folder locations by their "pathname", which is just a list of directories needed to get to your current location. Note: "folder" and "directory" mean the same thing, but most computer science texts will use the word "directory". There are two different ways of expressing pathnames that you will come across; one is a constant pathname, which describes how to access a location from anywhere. A second one is a relative path name, which tells you how to get to a location from your current location. If you are already in a folder. You may see these pathnames have something like `..`, which tells the computer to go back a directory from the current location, but otherwise the style of these pathnames will look similar. 

You will need to learn the basic text commands to navigate your computer system using the terminal. Important commands to learn include how to change which folder you are in, how to see the contents of your current folder, and more. Here is a list of commands and their meanings. Note, the `<psudo>` notation are not part of the command but only to illustrate where you should insert some other text:

| `command` | **name** | notes |
| --- | --- | --- |
| `ls` | **list** | Note, this a lowercase `l`(elle), not an uppercase `i`(eye). This will "list" everything in the current directory. |
| `cd <location>` | **change directory** | move to the  specified [location]. the location must be a director also known as a folder. |
| `mkdir <name>` |  **make directory** | make a new directory at your current location using the provided `<name>` | 
| `cp <from here> <to here>` | **copy** | locate a file `<from here>` and make a copy of it `<to here>`, commonly noted `cp <src> <dst>` or `cp <source> <destination>`. |
| `mv <from here> <to here>` | **move** | locate a file `<from here>` and move that file `<to here>` do not maintain the file in `<from here>`, commonly noted `mv <src> <dst>` or `mv <source> <destination>`. |
| `zip <zip file> <listed files>` | **zip** | gather all of the `<listed files>` and compress them to new "zip" file called `<zip file>`. |
| `rm <file name>` | **remove** | permanently delete the file called `<file name>`. ***Be very careful when using this. It cannot be reversed.*** |


Finally, you will need to know how to compile code from your terminal. Let us say that we have some code in a file called ``helloWorld.cpp". In order to compile this program, we would have to navigate to the directory containing this file. Once there, you will enter the command:

{% highlight bash %}
g++ -std=c++17 helloWorld.cpp 
{% endhighlight %}

Let us understand the parts:
1. `g++` is the compiler program.
1. `-std=c++17` is the version of C++ we want to use.
1. `helloWorld.cpp` is the file we wish to compile.

This command creates a file named a.out which is the compiled version of the code in helloWorld.cpp, which can be executed. You can run this compiled code using the following command:

{% highlight bash %}
 ./a.out
{% endhighlight %}
\begin{minted}{bash}

**Pro Tips**:
1. <ins>Tab Complete</ins>: if you're typing something in the command line that’s very long, but unique, you can hit tab when you're partially through and it will try to fill in the rest (kind of like autocomplete). If it doesn't, and you press tab twice, it tells you everything it has as options.
1. <ins>Command history browsing</ins>: if you have typed a command and want to repeat it, just press the up arrow. It will bring up your last executed command. Pressing up again will go to the one before. Pressing down will go forward in time through the list.



\subsection{Anatomy of a C++ Program}

You will need a couple of components for the computer to be able to understand how to translate code that you can read into something it can actually do. 

Here is a snapshot of a basic ``Hello World" program from the course textbook,  Brief C++: Late Objects, Enhanced eText. 

\includegraphics[width=\textwidth]{images/hello_world_16.png}

\section{Recitation}
\subsection{Software Setup}
You will need to install and become familiar with the software we will be using this semester. Follow the appropriate installation guides in Appendix A for your particular computer (Windows or Mac) to install VS Code. 

Once you have installed your software you will need to open VS Code and open the terminal. You will need VS Code and a working terminal. Take a screenshot and submit it on Canvas for this week's Recitation assignment. 

\section{Homework}

\subsection{Hello World}

%TO-DO: Update this assignment to be more clear for what files the students should make and how to zip them together

The ``Hello, World!" program is one of the simplest programs in a programming language, and it is often used to illustrate the basic syntax of a programming language. We will need to first create a folder to store our program file in and then create the file to write the program.

First, open VS Code. You can make a new folder by clicking this button: 

\includegraphics[width=7cm]{images/hello_world_2.png}

Name the folder something intuitive, like ``Week\_1", ``Recitation\_1", or similar. Once you have your folder you will need to create a file within it, which you can do with the toolbar across the top:

\includegraphics[width=7cm]{images/hello_world_4.png}

You should name your file \mintinline{c++}{helloWorld.cpp} -- this file name structure is important. Files of uncompiled C++ code should end with \mintinline{c++}{.cpp}, and the usage of a capital letter at the beginning of each word makes it legible even without spaces or punctuation. This style of writing names is often called ``camel case". 

Type the following code into your file:

\begin{minted}{c++}
    #include <iostream>

    int main() {
        std::cout << "Hello, world!" << std::endl;
    }
\end{minted}

Save your file.  A quick shortcut to save is Cmd + S (In Mac) or Ctrl + S (in Windows). Now you will need to compile and run your program. You can review the background information to see how to do this. Once you have completed this and successfully run your program, take a screenshot of your VS Code window including both the file and the terminal. 

\subsection{Hello World: Improved}

Now, let us explore this program a little more. Add a statement to use the standard namespace. Insert \mintinline{c++}{using namespace std;} at the beginning of the code, then we can remove the \mintinline{c++}{std::} prefixes. Your new code should look like this:

\begin{minted}{c++}
    #include <iostream>

    using namespace std;
    
    int main() {
        cout << "Hello, world!" << endl;
    }
\end{minted}

Run the program again using the steps above. Take an additional screenshot.

\subsection{Hello CSCI 1300!}

Let’s modify the file from Recitation to print ``Hello world! Hello CSCI 1300”. The text inside of the quotation marks is printed as it is. It’s case sensitive too! To see the updated output, compile and run again.

\begin{minted}{c++}
    #include <iostream>

    using namespace std;
    
    int main() {
        cout << "Hello, world! Hello CSCI 1300" << endl;
    }
\end{minted}

Once again, take a screenshot. For this section you should have three screenshots for the different Hello World programs.

Create a ZIP file that contains these three screenshots, and the three .cpp files you created, and submit it on Canvas.


### Anatomy of a C++ Program

You will need a couple of components for the computer to be able to understand how to translate code that you can read into something it can actually do. 

Here is a snapshot of a basic "Hello World" program from the course textbook,  Brief C++: Late Objects, Enhanced eText. 

{% include img.html src='hello_world_16.png' alt='hello world code in C++ with annotations every program has a main function; the statements of a function are enclosed in braces; every prgram includes one or more headers for required services such as input/output. every program that uses standard services requires the std directive. replace the Hello world statement when you write your own programs. each statement ends witha  semicolon.' caption='' %}


### Variables and Operators
This week we learned about variables and basic arithmetic operators in computer science. 

Variables in computer science are similar to variables you have seen in other math and science courses. A **variable** is a value that can change, depending on conditions or on information passed to the program.

A computer stores variables differently depending on the type of information they are meant to contain, so we must declare the type of variable. This table will tell you the names of different types of variables in C++:

| Type of variable | Declaration in `C++` | Size | Description | `Example` |
| --- | --- | --- | --- | --- |
| Integer | `int` | 2 or 4 bytes | a number that has no decimal value | `-42` |
| Float | `float` | 4 bytes | a number that has short decimal values | `2.98` |
| Double | `double` | 8 bytes | a number that can have longer decimals | `2.98<...>` |
| Character | `char` | 1 byte | stores a single letter/character using ASCII values | `'h'` |
| Boolean | `bool` | 1 byte | stores either True or False | `true` |

In order to create and use a variable, you must declare it using the appropriate declaration from the above table and then give it a name. You may also provide it an initial value, but this is not required to create a variable. Some examples include:

{% highlight c++ %}
// Here is an example of declaring variables:
int myNumber = 0;
double myDecimal = 3.1415;
char myEmptyChar;
{% endhighlight %}

After declaring variables, you can access them without repeating their data type. You can also perform basic operations, including the ones listed in this table:

| `Operator` | Description | `Example` |
| --- | --- | --- |
| `+` | Adds together two values | `x + y` |
| `+=` | Adds to itself and stores the new value| `x += y` |
| `-` | Subtracts one value from another | `x - y` |
| `*` |	Multiplies two values | `x * y` |
| `/` | Divides one value by another | `x / y` |
| `%` | Modulus; this returns the division remainder | `x % y` |
| `++` | Increment; this increases the value of a variable by 1 | `++x` |
| `--` | Decrement; this decreases the value of a variable by 1 | `-` |

{% highlight c++ %}
// Here is an example of declaring variables and using operators:
int myNumber = 4;
int mySecondNumber = 5;
int mySum = myNumber+mySecondNumber;
int myThirdNumber = 6;
mySum = mySum + myThirdNumber;
int myFourthNumber = 7;
mySum += myFourthNumber;
// By the end of this code, the variable `mySum`
// would contain `4+5+6+7`, or rather, `22`.
{% endhighlight %}


### Terminal Input and Output

It is important to be able to take input from the user or to print output to the terminal as your program runs. You can do this using `cin` and `cout` for input and output, respectively. 

The Hello World program you have seen provides an example of using `cout` to display output.

{% highlight c++ %}
// EXAMPLE: Hello World for C++:
#include <iostream>

using namespace std;

int main() {
    cout << "Hello, world!" << endl;
    
    return 0;
}
{% endhighlight %}


You can similarly ask the user for a particular value and store that value in a variable using `cin`:


{% highlight c++ %}
// EXAMPLE: An example of collecting user input to sum two integer variables and then printing their sum
#include <iostream>

using namespace std;

int main() {
    int firstNum;
    int secondNum;
    cout << "Please provide one number:" << endl;
    cin >> firstNum;
    cout << "Please provide a second number:" << endl;
    cin >> secondNum;
    cout << "The sum of these two numbers is " << firstNum + secondNum << endl;

    return 0;
}
{% endhighlight %}


### Pseudocode and Algorithms

Pseudocode is used to develop algorithms. An algorithm is a procedure for solving a problem.

An algorithm describes actions to be executed and the order in which those actions are to be executed. In other words, an algorithm is merely the sequence of steps taken to solve a problem; like a recipe. An algorithm is not computer code. Algorithms are just the instructions which provide a clear path for you to write the computer code.

<div markdown="ol" style="margin-bottom: 10px; margin-top: 10px; overflow: hidden; color: #000000; background-color: #eebb00; border-color: #bce8f1; padding: 15px; border: 1px solid transparent; border-radius: 4px;"> 
  <b>An algorithm for adding two numbers together:</b>
  <ol>
    <li>Step 1: Start</li>
    <li>Step 2: Declare variables <code>num1</code>, <code>num2</code>, and <code>sum</code>.</li>
    <li>Step 3: Read values <code>num1</code> and <code>num2</code>.</li>
    <li>Step 4: Add <code>num1</code> and <code>num2</code> and assign the result to <code>sum</code>.</li>
    <li>Step 5: Display <code>sum</code></li>
    <li>Step 6: Stop</li>
  </ol>
</div>


The main difference between an algorithm and pseudocode is that an algorithm is a step by step procedure to solve a given problem while pseudocode is a method of writing an algorithm. In other words, an algorithm is how to solve a problem while pseudocode is how to implement that solution. 

| Algorithm | Pseudocode |
| --- | --- |
| An unambiguous specification of how to solve a problem. | An informal high-level description of the operating principle of a computer program or other algorithm. |
| Helps to simplify and understand the problem. | A method of developing an algorithm. |


Pseudocode is informal language that helps programmers develop algorithms (or recipes). Although there are no hard and fast rules for pseudocode, there are some suggestions to help make pseudocode more understandable and easy to read.

For instance, consider indenting all statements showing a "dependency”, like statements that use: While, do, for, if.

Several keywords are often used to indicate common input, output, and processing operations.

| Term | A Few Equivalent Terms |
| --- | --- |
| Input: |  READ, OBTAIN, GET |
| Output: |  PRINT, DISPLAY, SHOW |
| Compute: |  COMPUTE, CALCULATE, DETERMINE |
| Initialize: |  SET, INITIALIZE |
| Add one: | INCREMENT, BUMP |


For looping and selection, the keywords that you might consider writing include:
1. Do While...
1. Do Until...
1. Case...
1. If… then...
1. Call ... with (parameters)
1. Call
1. Return ....
1. Return
1. When

Try to indicate the end of loops and iteration by using scope terminators.
For instance use `if… (statements) ... endif`.

Other words you may find useful while writing pseudocode include: Generate, Compute, Process, set, reset, increment, compute, calculate, add, sum, multiply, subtract, divide, print, display, input, output, edit, test, etc.

Be sure to indent if the indentation fosters understanding. Being clear is the purpose of pseudocode, and a very desirable goal to strive for.

Here are some examples of pseudocode:

{% highlight c++ %} 
// Will a grade pass?
/**
 * If students course grade is lower than  60
 *    Then Print, "Failed"
 * else
 *     If students exam grade is lower than  67
 *         Then Print, "Failed"
 *     else
 *         Print, "Passed"
 *     endif
 * endif
 */
{% endhighlight %}    



{% highlight c++ %} 
// How do you find the area of a rectangle?
  // Read the length of the rectangle
  // Read the width of the rectangle
  // Compute the area of the rectangle as length times width.
{% endhighlight %}    

You should write pseudocode whenever you are addressing problems in computer science. This allows you space to determine how to solve a problem without worrying about syntax and formatting, instead of having to figure out everything all at once. 

## Warm Up
You will need to install and become familiar with the software we will be using this semester. Follow the appropriate installation guides in [Appendix A](/spring-2025-web/jekyll/update/2025/01/10/Appendix-A.html) for your particular computer (Windows or Mac) to install VS Code.

Once you have installed your software you will need to open VS Code and open the terminal. You will need VS Code and a working terminal to complete the recitation this week. Take a screenshot and submit it on Canvas for this week's Warm Up assignment. 


## Recitation

### Hello World

The "Hello, World!" program is one of the simplest programs in a programming language, and it is often used to illustrate the basic syntax of a programming language. We will need to first create a folder to store our program file in and then create the file to write the program.

First, open VS Code. You can make a new folder by clicking this button: 

{% include img.html src='hello_world_2.png' alt='a folder icon with a plus is circled in red' caption='' %}

Name the folder something intuitive, like "Week_1", "Recitation_1", or similar. Once you have your folder you will need to create a file within it, which you can do with the toolbar across the top:

{% include img.html src='hello_world_4.png' alt='top navigation File is expanded and first option New File is highlighted in blue' caption='' %}

You should name your file `helloWorld.cpp` -- this file name structure is important. Files of uncompiled C++ code should end with `.cpp`, and the usage of a capital letter at the beginning of each word makes it legible even without spaces or punctuation. This style of writing names is often called "camel case". *If you are interested there are other cases like PascalCase, snake_case, and SCREAMING_SNAKE_CASE, reach out on EdStem to dicsuss this further.*

Type the following code into your file:

{% highlight c++ %}
#include <iostream>

int main() {
    std::cout << "Hello, world!" << std::endl;
}
{% endhighlight %}


Save your file.  A quick shortcut to save is `Cmd + S` (In Mac) or `Ctrl + S` (in Windows). Now you will need to compile and run your program. You can review the background information to see how to do this. Once you have completed this and successfully run your program, take a screenshot of your VS Code window including both the file and the terminal. 

Now, let us explore this program a little more. Add a statement to use the standard namespace. Insert `using namespace std;` at the beginning of the code, then we can remove the `std::` prefixes. Your new code should look like this:

{% highlight c++ %}
#include <iostream>

using namespace std;

int main() {
    cout << "Hello, world!" << endl;
}
{% endhighlight %}

Run the program again using the steps above. Take an additional screenshot.

Let’s modify the file to print "Hello world! Hello CSCI 1300”. The text inside of the quotation marks is printed as it is. It’s case sensitive too! To see the updated output, compile and run again.

{% highlight c++ %}
#include <iostream>

using namespace std;

int main() {
    cout << "Hello, world! Hello CSCI 1300" << endl;
}
{% endhighlight %}

Once again, take a screenshot. For this section you should have three screenshots for the different Hello World programs; you will need to submit this on Canvas. 

### Comments
You can add "comments" to your code. These are separate lines begining with `//` and are ignored by the computer but help you review your code later.

{% highlight c++ %}
// give me cout so I can print without writing MANY lines of code
#include <iostream>

// I don't want to have to write std::cout and std::endl
using namespace std;

// `main` is the name of a function
// it returns type `int`
int main() {
    // actually print something
    // don't forget the `;`
    cout << "Hello, world! Hello CSCI 1300" << endl;
}
{% endhighlight %}

### Variables

\begin{multipart}
    What is a variable?
\end{multipart}
<!-- 
\vspace{2cm}

\begin{multipart}
    Consider a variable tracking changing cost of an item on Ebay. What would be a good name for this variable?
\end{multipart}

\vspace{1.5cm}

\begin{multipart}
    Consider a variable that represents the roll of a 6-sided die. What possible values could this variable hold? 
\end{multipart}

\vspace{1.5cm}

\begin{multipart}
    Consider a variable that tracks the temperature outside. What data type should you use? Are there multiple types that would work?
\end{multipart}

\vspace{1.5cm} -->

### Converting Seconds to Days:Hours:Minutes:Seconds
<!-- A day has 86,400 seconds ($24 \times 60 \times 60$). Given a number of seconds in the range of 0 to 1,000,000 seconds, your program should print the time as days, hours, minutes, and seconds for a 24 hour clock. For example, 70,000 seconds is 0 days, 19 hours, 26 minutes, and 40 seconds. Your program should accept user input for the number of seconds to convert and then use that number in your calculations. Format your output as follows:  -->

<!-- \mintinline{c++}{The time is W days, X hours, Y minutes, and Z seconds.}

\begin{multipart}
    Explicitly list the variables you will need and their data types. 
\end{multipart}

\vspace{3cm}

\begin{multipart}
    What arithmetic operators will be most useful for this problem?
\end{multipart}

\vspace{2cm} -->

## Homework
### Hello, Name!
You have recently learned how to accept user input and store it in a variable. Write a program where you ask the user for their name in the terminal, and then print `Hello, [name]!` in the terminal. You may find it helpful to start with the Hello World program from recitation. 

A few example runs are shown below. In these examples, red text represents user-provided text (or text you would have to type in the terminal while running the program). 

<!-- \begin{sample}
What is your name?

\textcolor{red}{Mike}

Hello, Mike!
\end{sample}

\begin{sample}
What is your name?

\textcolor{red}{samantha}

Hello, samantha!
\end{sample} -->

### Volume to Ounces

While shopping over the weekend for almond milk, you discover that all the almond milk cartons have square bases and varying heights. Write an algorithm which takes user inputs for the side length of the square base of the carton in inches and the height of the carton in inches and outputs how many ounces a carton holds. You can use the following formula to convert cubic inches to ounces:

$$1 in^3 = 0.554 oz$$

Hint: you should calculate cubic inches from the carton's dimensions before calculating ounces.

<!-- \begin{sample}
What is the side length of the base of the carton in inches?

\textcolor{red}{4}

What is the height of the carton in inches?

\textcolor{red}{5}

The carton has a volume of 44.33 oz
\end{sample} -->

You will need to submit pseudocode for this solution -- NOT code. You do not have to have a coded or tested solution for this, only a set of step-by-step instructions for how someone else might write the code.  

### Converting Seconds to Days:Hours:Minutes:Seconds
You will need to code the question discussed in Recitation section 3.3. The question is:

<!-- A day has 86,400 seconds ($24 \times 60 \times 60$). Given a number of seconds in the range of 0 to 1,000,000 seconds, your program should print the time as days, hours, minutes, and seconds for a 24 hour clock. For example, 70,000 seconds is 0 days, 19 hours, 26 minutes, and 40 seconds. Your program should accept user input for the number of seconds to convert and then use that number in your calculations. Format your output as follows:  -->

<!-- \mintinline{c++}{The time is W days, X hours, Y minutes, and Z seconds.} -->

You should start by writing the algorithm on paper, using the variables and arithmetic operators you identified in recitation. You will then need to write the code for this question and submit this via Canvas. 

Here are a few example runs:

<!-- \begin{sample}
    How many seconds (between 0 to 1,000,000) would you like to convert to Days, Hours, Minutes, and Seconds?

    \textcolor{red}{70000}

    The time is 0 days, 19 hours, 26 minutes, and 40 seconds.
\end{sample}

\begin{sample}
    How many seconds (between 0 to 1,000,000) would you like to convert to Days, Hours, Minutes, and Seconds?

    \textcolor{red}{409176}

    The time is 4 days, 17 hours, 39 minutes, and 36 seconds.
\end{sample} -->


### Identify and Correct the Errors
There are several snippets of code below where there is one error. You will need to identify and correct the error so that the code compiles. This code is also available directly in CodeRunner. 

<!-- \begin{multipart}
Spot the error:


    \begin{minted}{c++}
#include <iostream> 
using namespace std;
						
int Main()
{
	cout << "Hello, World!" << endl;
	return 0; 
}
    \end{minted}
\end{multipart}

\begin{multipart}
Spot the error:


    \begin{minted}{c++}
#include <iostream> 
using namespace std;
						
int main 
{
	cout << "Hello, World!" << endl;
	return 0; 
}
    \end{minted}
\end{multipart}

\begin{multipart}
Spot the error:


    \begin{minted}{c++}
#include <iostream> 
using namespace std;
						
int main() 
{
	cout << "Hello, World! << endl;
	return 0; 
} 
    \end{minted}
\end{multipart}

\begin{multipart}
Spot the error:


    \begin{minted}{c++}
#include <IOstream> 
using namespace std;
						
int main() 
{
	cout << "Hello, World!" << endl
	return 0; 
} 
    \end{minted}
\end{multipart}

\begin{multipart}
Spot the error:


    \begin{minted}{c++}
#include <iostream> 
using namespace;
						
int main() 
{
	cout << "Hello, World!" < endl; 
}
    \end{minted}
\end{multipart} -->


